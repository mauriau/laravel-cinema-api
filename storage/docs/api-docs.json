{
    "swagger": "2.0",
    "info": {
        "title": "Swagger Petstore",
        "description": "This is a sample server Petstore server.  You can find out more about Swagger at <a href=\"http://swagger.io\">http://swagger.io</a> or on irc.freenode.net, #swagger.  For this sample, you can use the api key \"special-key\" to test the authorization filters",
        "termsOfService": "http://helloreverb.com/terms/",
        "contact": {
            "email": "apiteam@wordnik.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "host": "localhost:1337",
    "basePath": "/",
    "schemes": [
        "http"
    ],
    "paths": {
        "/abonnement": {
            "get": {
                "tags": [
                    "abonnement"
                ],
                "summary": "Display a listing of all abonnement.",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Abonnement"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "abonnement"
                ],
                "summary": "Store a new created abonnement in storage.",
                "operationId": "postAbonnement",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_forfait",
                        "in": "formData",
                        "description": "id of forfait",
                        "type": "integer"
                    },
                    {
                        "name": "debut",
                        "in": "formData",
                        "description": "Time of the abonnement",
                        "type": "string",
                        "format": "date"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Abonnement"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/abonnement/{id_abonnement}": {
            "get": {
                "tags": [
                    "abonnement"
                ],
                "summary": "Display the specified abonnement.",
                "operationId": "getAbonnement",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_abonnement",
                        "in": "path",
                        "description": "Abonnement id to get",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Abonnement"
                        }
                    },
                    "404": {
                        "description": "Abonnement does not exist"
                    }
                }
            },
            "put": {
                "tags": [
                    "abonnement"
                ],
                "summary": "Update an existing abonnement in storage.",
                "operationId": "putAbonnement",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_abonnement",
                        "in": "formData",
                        "description": "id of abonnement",
                        "type": "integer"
                    },
                    {
                        "name": "debut",
                        "in": "formData",
                        "description": "Started of the abonnement",
                        "type": "string",
                        "format": "date"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "404": {
                        "description": "Abonnement does not exist"
                    }
                }
            },
            "delete": {
                "tags": [
                    "abonnement"
                ],
                "summary": "Remove the specified abonnement from storage.",
                "operationId": "deleteAbonnement",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_abonnement",
                        "in": "path",
                        "description": "Abonnement identifier",
                        "schema": {
                            "type": "integer"
                        },
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Abonnement does not exist"
                    }
                }
            }
        },
        "/distributeur": {
            "get": {
                "tags": [
                    "distributeur"
                ],
                "summary": "Show distributeur.",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Distributeur"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            },
            "post": {
                "tags": [
                    "distributeur"
                ],
                "summary": "Ajouter un distributeur.",
                "operationId": "postDistributeur",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Nom du distributeur",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "telephone",
                        "in": "formData",
                        "description": "Telephone",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "adresse",
                        "in": "formData",
                        "description": "Adresse",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "cpostal",
                        "in": "formData",
                        "description": "Code postal",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ville",
                        "in": "formData",
                        "description": "Ville",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "pays",
                        "in": "formData",
                        "description": "Pays",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Distributeur"
                            }
                        }
                    },
                    "404": {
                        "description": "Woops! The informations can't be validated!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Distributeur"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            }
        },
        "/film": {
            "get": {
                "tags": [
                    "film"
                ],
                "summary": "Affiche la liste des films.",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Film"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "film"
                ],
                "summary": "Store a newly created film in storage.",
                "operationId": "postFilm",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_genre",
                        "in": "formData",
                        "description": "Genre Identifier",
                        "type": "integer"
                    },
                    {
                        "name": "id_distributeur",
                        "in": "formData",
                        "description": "Distibuteur identifier",
                        "type": "integer"
                    },
                    {
                        "name": "titre",
                        "in": "formData",
                        "description": "Film title",
                        "type": "integer"
                    },
                    {
                        "name": "resum",
                        "in": "formData",
                        "description": "Abstract of the film",
                        "type": "string"
                    },
                    {
                        "name": "date_debut_affiche",
                        "in": "formData",
                        "description": "Release start date of the film",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "date_fin_affiche",
                        "in": "formData",
                        "description": "Release end date of the film",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "duree_minutes",
                        "in": "formData",
                        "description": "Duration of the film (in minutes)",
                        "type": "integer"
                    },
                    {
                        "name": "annee_production",
                        "in": "formData",
                        "description": "Production year of the film",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Film"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/film/{id_film}": {
            "get": {
                "tags": [
                    "film"
                ],
                "summary": "Display the specified film.",
                "operationId": "getFilm",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_film",
                        "in": "path",
                        "description": "Film id to get",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Film"
                        }
                    },
                    "404": {
                        "description": "Film does not exist"
                    }
                }
            },
            "put": {
                "tags": [
                    "film"
                ],
                "summary": "Update an existing film in storage.",
                "operationId": "putFilm",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_film",
                        "in": "path",
                        "description": "Film identifier",
                        "schema": {
                            "type": "integer"
                        },
                        "type": "integer"
                    },
                    {
                        "name": "id_genre",
                        "in": "formData",
                        "description": "Genre Identifier",
                        "type": "integer"
                    },
                    {
                        "name": "id_distributeur",
                        "in": "formData",
                        "description": "Distibuteur Identifier",
                        "type": "integer"
                    },
                    {
                        "name": "titre",
                        "in": "formData",
                        "description": "Film title",
                        "type": "integer"
                    },
                    {
                        "name": "resum",
                        "in": "formData",
                        "description": "Abstract of the film",
                        "type": "string"
                    },
                    {
                        "name": "date_debut_affiche",
                        "in": "formData",
                        "description": "Release start date of the film",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "date_fin_affiche",
                        "in": "formData",
                        "description": "Release end date of the film",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "duree_minutes",
                        "in": "formData",
                        "description": "Duration of the film (in minutes)",
                        "type": "integer"
                    },
                    {
                        "name": "annee_production",
                        "in": "formData",
                        "description": "Production year of the film",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "404": {
                        "description": "Film does not exist"
                    }
                }
            },
            "delete": {
                "tags": [
                    "film"
                ],
                "summary": "Remove the specified film from storage.",
                "operationId": "deleteFilm",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_film",
                        "in": "path",
                        "description": "Film identifier",
                        "schema": {
                            "type": "integer"
                        },
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Film does not exist"
                    }
                }
            }
        },
        "/fonction": {
            "get": {
                "tags": [
                    "fonction"
                ],
                "summary": "Display a listing of all fonctions.",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Fonction"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "fonction"
                ],
                "summary": "Post a new in storage.",
                "operationId": "postFonction",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Nom Identifier",
                        "type": "string"
                    },
                    {
                        "name": "salaire",
                        "in": "formData",
                        "description": "Salaire Identifier",
                        "type": "string"
                    },
                    {
                        "name": "cadre",
                        "in": "formData",
                        "description": "Date de naissance",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "404": {
                        "description": "Fonction does not exist"
                    }
                }
            }
        },
        "/fonction/{id_fonction}/personnes": {
            "get": {
                "tags": [
                    "fonction"
                ],
                "summary": "Display the specified fonction with personnes.",
                "operationId": "getFilm",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_fonction",
                        "in": "path",
                        "description": "Fonction \u00e0 chercher",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Fonction"
                        }
                    },
                    "404": {
                        "description": "La fonction n'existe pas."
                    }
                }
            }
        },
        "/fonction/{id_fonction}": {
            "get": {
                "tags": [
                    "fonction"
                ],
                "summary": "Display the specified fonction.",
                "operationId": "getFilm",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_fonction",
                        "in": "path",
                        "description": "Fonction\u00e0 chercher",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Fonction"
                        }
                    },
                    "404": {
                        "description": "La fonction n'existe pas."
                    }
                }
            },
            "put": {
                "tags": [
                    "fonction"
                ],
                "summary": "Update an existing fonction in storage.",
                "operationId": "putFonction",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_fonction",
                        "in": "path",
                        "description": "Fonction identifier",
                        "schema": {
                            "type": "integer"
                        },
                        "type": "integer"
                    },
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Nom Identifier",
                        "type": "string"
                    },
                    {
                        "name": "salaire",
                        "in": "formData",
                        "description": "Salaire Identifier",
                        "type": "string"
                    },
                    {
                        "name": "cadre",
                        "in": "formData",
                        "description": "Date de naissance",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "404": {
                        "description": "Fonction does not exist"
                    }
                }
            },
            "delete": {
                "tags": [
                    "fonction"
                ],
                "summary": "Remove the specified fonction from storage.",
                "operationId": "deleteFonction",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_fonction",
                        "in": "path",
                        "description": "Fonction identifier",
                        "schema": {
                            "type": "integer"
                        },
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Fonction does not exist"
                    }
                }
            }
        },
        "/forfait": {
            "get": {
                "tags": [
                    "forfait"
                ],
                "summary": "Display a listing of all forfait.",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "List of forfait",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Forfait"
                            }
                        }
                    },
                    "204": {
                        "description": "No find forfait",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Forfait"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "forfait"
                ],
                "summary": "Add Forfait into storage",
                "operationId": "postForfait",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of forfait",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resum",
                        "in": "formData",
                        "description": "Resum of forfait",
                        "type": "string"
                    },
                    {
                        "name": "prix",
                        "in": "formData",
                        "description": "Price of forfait",
                        "type": "integer"
                    },
                    {
                        "name": "duree_jours",
                        "in": "formData",
                        "description": "Time of forfait",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Membre inserted",
                        "schema": {
                            "$ref": "#/definitions/Forfait"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/forfait/{id_forfait}": {
            "get": {
                "tags": [
                    "forfait"
                ],
                "summary": "Display the specified forfait.",
                "operationId": "getForfait",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_forfait",
                        "in": "path",
                        "description": "Forfait id to get",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Forfait"
                        }
                    },
                    "404": {
                        "description": "Forfait does not exist"
                    }
                }
            },
            "put": {
                "tags": [
                    "forfait"
                ],
                "summary": "Update an existing forfait in storage.",
                "operationId": "putForfait",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_forfait",
                        "in": "formData",
                        "description": "Id of forfait",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of forfait",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "resum",
                        "in": "formData",
                        "description": "Resum of forfait",
                        "type": "string"
                    },
                    {
                        "name": "prix",
                        "in": "formData",
                        "description": "Price of forfait",
                        "type": "integer"
                    },
                    {
                        "name": "duree_jours",
                        "in": "formData",
                        "description": "Time of forfait",
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Forfait inserted",
                        "schema": {
                            "$ref": "#/definitions/Forfait"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            },
            "delete": {
                "tags": [
                    "forfait"
                ],
                "summary": "Remove the specified forfait from storage.",
                "operationId": "deleteForfait",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_forfait",
                        "in": "path",
                        "description": "Forfait identifier",
                        "schema": {
                            "type": "integer"
                        },
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Forfait does not exist"
                    }
                }
            }
        },
        "/genre": {
            "get": {
                "tags": [
                    "genre"
                ],
                "summary": "Display all of the genres.",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Genre"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            },
            "post": {
                "tags": [
                    "genre"
                ],
                "summary": "Add a genre.",
                "operationId": "postGenre",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of the genre",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Genre"
                            }
                        }
                    },
                    "404": {
                        "description": "Woops! The informations can't be validated!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Genre"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            }
        },
        "/genre/{id_genre}": {
            "get": {
                "tags": [
                    "genre"
                ],
                "summary": "Display a genre.",
                "operationId": "getGenre",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_genre",
                        "in": "path",
                        "description": "Id of the genre",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Genre"
                            }
                        }
                    },
                    "404": {
                        "description": "Woops! The genre that you looking for doesn't exist!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Genre"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            },
            "put": {
                "tags": [
                    "genre"
                ],
                "summary": "Modify a genre.",
                "operationId": "putGenre",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_genre",
                        "in": "path",
                        "description": "Id of the genre",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of the genre",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Genre"
                            }
                        }
                    },
                    "404": {
                        "description": "Woops! The genre that you looking for doesn't exist!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Genre"
                            }
                        }
                    },
                    "422": {
                        "description": "Woops! The informations can't be validated!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Genre"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            },
            "delete": {
                "tags": [
                    "genre"
                ],
                "summary": "Delete a genre.",
                "operationId": "deleteGenre",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_genre",
                        "in": "path",
                        "description": "Id of the genre",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Genre"
                            }
                        }
                    },
                    "404": {
                        "description": "Woops! The genre that you want to delete doesn't exist!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Genre"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            }
        },
        "/historique": {
            "get": {
                "tags": [
                    "historique"
                ],
                "summary": "Display a listing of all historique.",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "List of historique",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HistoriqueMembre"
                            }
                        }
                    },
                    "204": {
                        "description": "No find historique",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HistoriqueMembre"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "historique"
                ],
                "summary": "Add historique into storage",
                "operationId": "postHistorique",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_membre",
                        "in": "formData",
                        "description": "Member id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "id_sceance",
                        "in": "formData",
                        "description": "Sceance id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "date",
                        "in": "formData",
                        "description": "Date of historique",
                        "type": "string",
                        "format": "date"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Historique inserted",
                        "schema": {
                            "$ref": "#/definitions/HistoriqueMembre"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/historique/{id_historique}": {
            "get": {
                "tags": [
                    "historique"
                ],
                "summary": "Display the specified historique.",
                "operationId": "getHistorique",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_historique",
                        "in": "path",
                        "description": "Historique id to get",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/HistoriqueMembre"
                        }
                    },
                    "404": {
                        "description": "Historique does not exist"
                    }
                }
            },
            "put": {
                "tags": [
                    "historique"
                ],
                "summary": "Update historique from storage",
                "operationId": "putHistoriqueMembre",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_historique",
                        "in": "formData",
                        "description": "Historique id",
                        "type": "integer"
                    },
                    {
                        "name": "id_membre",
                        "in": "formData",
                        "description": "Member id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "id_sceance",
                        "in": "formData",
                        "description": "Sceance id",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "date",
                        "in": "formData",
                        "description": "Date of historique",
                        "type": "string",
                        "format": "date"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Historique inserted",
                        "schema": {
                            "$ref": "#/definitions/HistoriqueMembre"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            },
            "delete": {
                "tags": [
                    "historique"
                ],
                "summary": "Remove the specified historique from storage.",
                "operationId": "deleteHistorique",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_historique",
                        "in": "path",
                        "description": "Historique identifier",
                        "schema": {
                            "type": "integer"
                        },
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Historique does not exist"
                    }
                }
            }
        },
        "/membre": {
            "get": {
                "tags": [
                    "membre"
                ],
                "summary": "Display a listing of all membres.",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "List of members",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Membre"
                            }
                        }
                    },
                    "204": {
                        "description": "No find members",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Membre"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "membre"
                ],
                "summary": "Add Membre into storage",
                "operationId": "postMembre",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_personne",
                        "in": "formData",
                        "description": "id of personne",
                        "type": "integer"
                    },
                    {
                        "name": "id_abonnement",
                        "in": "formData",
                        "description": "Id of abonnement",
                        "type": "integer"
                    },
                    {
                        "name": "date_inscription",
                        "in": "formData",
                        "description": "Created date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "debut_abonnement",
                        "in": "formData",
                        "description": "Started abonnement date",
                        "type": "string",
                        "format": "date"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Membre inserted",
                        "schema": {
                            "$ref": "#/definitions/Membre"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/membre/{id_membre}": {
            "get": {
                "tags": [
                    "membre"
                ],
                "summary": "Display a member",
                "operationId": "getMembre",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_membre",
                        "in": "path",
                        "description": "Id of membre",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Membre finded",
                        "schema": {
                            "$ref": "#/definitions/Membre"
                        }
                    },
                    "404": {
                        "description": "Membre does not exist"
                    }
                }
            },
            "put": {
                "tags": [
                    "membre"
                ],
                "summary": "Update a Membre",
                "operationId": "putMembre",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_membre",
                        "in": "formData",
                        "description": "id of membre",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "id_personne",
                        "in": "formData",
                        "description": "id of membre",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "id_abonnement",
                        "in": "formData",
                        "description": "Id of abonnement",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "date_inscription",
                        "in": "formData",
                        "description": "Created date",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "debut_abonnement",
                        "in": "formData",
                        "description": "Started abonnement date",
                        "type": "string",
                        "format": "date"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Membre inserted",
                        "schema": {
                            "$ref": "#/definitions/Membre"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            },
            "delete": {
                "tags": [
                    "membre"
                ],
                "summary": "Remove the specified member from storage.",
                "operationId": "deleteMembre",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_membre",
                        "in": "path",
                        "description": "Membre identifier",
                        "schema": {
                            "type": "integer"
                        },
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Member does not exist"
                    }
                }
            }
        },
        "/membre/{id_membre}/extras/{pers}/{abo}/{forfait}": {
            "get": {
                "tags": [
                    "membre"
                ],
                "summary": "Display a member",
                "operationId": "getMembre",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_membre",
                        "in": "path",
                        "description": "Id of membre",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "pers",
                        "in": "path",
                        "description": "get personne true/false; default:false",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "abo",
                        "in": "path",
                        "description": "get abonnement true/false; default:false",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "name": "forfait",
                        "in": "path",
                        "description": "get forfait true/false; default:false",
                        "required": false,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Membre finded",
                        "schema": {
                            "$ref": "#/definitions/Membre"
                        }
                    },
                    "404": {
                        "description": "Membre does not exist"
                    }
                }
            }
        },
        "/personne": {
            "get": {
                "tags": [
                    "personne"
                ],
                "summary": "Display a listing of all personnes.",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Personne"
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "personne"
                ],
                "summary": "Store a new personne in storage.",
                "operationId": "postPersonne",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Nom Identifier",
                        "type": "string"
                    },
                    {
                        "name": "prenom",
                        "in": "formData",
                        "description": "Prenom Identifier",
                        "type": "string"
                    },
                    {
                        "name": "date_naissance",
                        "in": "formData",
                        "description": "Date de naissance",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "email",
                        "in": "formData",
                        "description": "email of the personne",
                        "type": "string"
                    },
                    {
                        "name": "adresse",
                        "in": "formData",
                        "description": "adresse of the personne",
                        "type": "string"
                    },
                    {
                        "name": "cpostal",
                        "in": "formData",
                        "description": "code postal of the personne",
                        "type": "string"
                    },
                    {
                        "name": "ville",
                        "in": "formData",
                        "description": "ville of the personne",
                        "type": "string"
                    },
                    {
                        "name": "pays",
                        "in": "formData",
                        "description": "email of the personne",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "404": {
                        "description": "Personne does not exist"
                    }
                }
            }
        },
        "/personne/{id_personne}/fonctions": {
            "get": {
                "tags": [
                    "personne"
                ],
                "summary": "Affiche les personnes qui on la fonction {id}",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_personne",
                        "in": "path",
                        "description": "Personne id to get",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Personne"
                            }
                        }
                    }
                }
            }
        },
        "/personne/{id_personne}": {
            "get": {
                "tags": [
                    "personne"
                ],
                "summary": "Affiche une personne.",
                "operationId": "getPersonne",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_personne",
                        "in": "path",
                        "description": "Personne id to get",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Personne"
                        }
                    },
                    "404": {
                        "description": "Personne does not exist"
                    }
                }
            },
            "put": {
                "tags": [
                    "personne"
                ],
                "summary": "Update an existing personne in storage.",
                "operationId": "putPersonne",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_personne",
                        "in": "path",
                        "description": "Personne identifier",
                        "schema": {
                            "type": "integer"
                        },
                        "type": "integer"
                    },
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Nom Identifier",
                        "type": "string"
                    },
                    {
                        "name": "prenom",
                        "in": "formData",
                        "description": "Prenom Identifier",
                        "type": "string"
                    },
                    {
                        "name": "date_naissance",
                        "in": "formData",
                        "description": "Date de naissance",
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "email",
                        "in": "formData",
                        "description": "email of the personne",
                        "type": "string"
                    },
                    {
                        "name": "adresse",
                        "in": "formData",
                        "description": "adresse of the personne",
                        "type": "string"
                    },
                    {
                        "name": "cpostal",
                        "in": "formData",
                        "description": "code postal of the personne",
                        "type": "string"
                    },
                    {
                        "name": "ville",
                        "in": "formData",
                        "description": "ville of the personne",
                        "type": "string"
                    },
                    {
                        "name": "pays",
                        "in": "formData",
                        "description": "email of the personne",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    },
                    "404": {
                        "description": "Personne does not exist"
                    }
                }
            },
            "delete": {
                "tags": [
                    "personne"
                ],
                "summary": "Remove the specified personne from storage.",
                "operationId": "deletePersonne",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_personne",
                        "in": "path",
                        "description": "Personne identifier",
                        "schema": {
                            "type": "integer"
                        },
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation"
                    },
                    "404": {
                        "description": "Personne does not exist"
                    }
                }
            }
        },
        "/reduction": {
            "get": {
                "tags": [
                    "reduction"
                ],
                "summary": "Display all of the discounts.",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reduction"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            },
            "post": {
                "tags": [
                    "reduction"
                ],
                "summary": "Add a discount.",
                "operationId": "postReducation",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of the discount",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "date_debut",
                        "in": "formData",
                        "description": "Begin of the discount",
                        "required": false,
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "date_fin",
                        "in": "formData",
                        "description": "End of the discount",
                        "required": false,
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "pourcentage_reduction",
                        "in": "formData",
                        "description": "Percentage of the discount",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reduction"
                            }
                        }
                    },
                    "404": {
                        "description": "Woops! The informations can't be validated!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reduction"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            }
        },
        "/reduction/{id_reduction}": {
            "get": {
                "tags": [
                    "reduction"
                ],
                "summary": "Display a discount.",
                "operationId": "getReducation",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_reduction",
                        "in": "path",
                        "description": "Id of the discount",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reduction"
                            }
                        }
                    },
                    "404": {
                        "description": "Woops! The discount that you looking for doesn't exist!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reduction"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            },
            "put": {
                "tags": [
                    "reduction"
                ],
                "summary": "Modify a discount.",
                "operationId": "putReducation",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_reduction",
                        "in": "path",
                        "description": "Id of the discount",
                        "required": true,
                        "type": "integer"
                    },
                    {
                        "name": "nom",
                        "in": "formData",
                        "description": "Name of the discount",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "date_debut",
                        "in": "formData",
                        "description": "Begin of the discount",
                        "required": true,
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "date_fin",
                        "in": "formData",
                        "description": "End of the discount",
                        "required": true,
                        "type": "string",
                        "format": "date"
                    },
                    {
                        "name": "pourcentage_reduction",
                        "in": "formData",
                        "description": "Percentage of the discount",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reduction"
                            }
                        }
                    },
                    "404": {
                        "description": "Woops! The discount that you looking for doesn't exist!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reduction"
                            }
                        }
                    },
                    "422": {
                        "description": "Woops! The informations can't be validated!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reduction"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            },
            "delete": {
                "tags": [
                    "reduction"
                ],
                "summary": "Delete a discount.",
                "operationId": "deleteReducation",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id_reduction",
                        "in": "path",
                        "description": "Id of the discount",
                        "required": true,
                        "type": "integer"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reduction"
                            }
                        }
                    },
                    "404": {
                        "description": "Woops! The discount that you want to delete doesn't exist!",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Reduction"
                            }
                        }
                    },
                    "default": {
                        "description": "An error has been occured"
                    }
                }
            }
        }
    },
    "definitions": {
        "Abonnement": {
            "required": [
                "id_forfait"
            ],
            "properties": {
                "id_abonnement": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_forfait": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "debut": {
                    "type": "date",
                    "format": "date",
                    "default": "1994-06-01"
                }
            },
            "xml": {
                "name": "Abonnement"
            }
        },
        "Film": {
            "required": [
                "titre"
            ],
            "properties": {
                "id_film": {
                    "type": "number",
                    "format": "int64",
                    "default": 42
                },
                "id_genre": {
                    "type": "number",
                    "format": "int64",
                    "default": 17
                },
                "id_distributeur": {
                    "type": "number",
                    "format": "int64",
                    "default": 12
                },
                "titre": {
                    "type": "string",
                    "format": "string",
                    "default": "Pulp Fiction"
                },
                "resum": {
                    "type": "string",
                    "format": "string",
                    "default": "film de gangsters am\u00e9ricain r\u00e9alis\u00e9 par Quentin Tarantino et sorti en 1994"
                },
                "date_debut_affiche": {
                    "type": "date",
                    "format": "date",
                    "default": "1994-01-01"
                },
                "date_fin_affiche": {
                    "type": "date",
                    "format": "date",
                    "default": "1994-06-01"
                },
                "duree_minutes": {
                    "type": "number",
                    "format": "int64",
                    "default": 240
                },
                "annee_production": {
                    "type": "number",
                    "format": "int64",
                    "default": 1993
                }
            },
            "xml": {
                "name": "Film"
            }
        },
        "Fonction": {
            "required": [
                "nom"
            ],
            "properties": {
                "id_fonction": {
                    "type": "number",
                    "format": "int64",
                    "default": 5
                },
                "nom": {
                    "type": "string",
                    "format": "string",
                    "default": "Admin"
                },
                "resum": {
                    "type": "string",
                    "format": "string",
                    "default": "film de gangsters am\u00e9ricain r\u00e9alis\u00e9 par Quentin Tarantino et sorti en 1994"
                },
                "date_debut_affiche": {
                    "type": "date",
                    "format": "date",
                    "default": "1994-01-01"
                },
                "date_fin_affiche": {
                    "type": "date",
                    "format": "date",
                    "default": "1994-06-01"
                },
                "duree_minutes": {
                    "type": "number",
                    "format": "int64",
                    "default": 240
                },
                "annee_production": {
                    "type": "number",
                    "format": "int64",
                    "default": 1993
                }
            },
            "xml": {
                "name": "Fonction"
            }
        },
        "Forfait": {
            "required": [
                "nom"
            ],
            "properties": {
                "id_forfait": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "nom": {
                    "type": "string",
                    "format": "string",
                    "default": "etudiant"
                },
                "resum": {
                    "type": "string",
                    "format": "string",
                    "default": "pour les etudiants"
                },
                "prix": {
                    "type": "number",
                    "format": "int64",
                    "default": "15"
                },
                "duree_jours": {
                    "type": "number",
                    "format": "int64",
                    "default": "15"
                }
            },
            "xml": {
                "name": "Forfait"
            }
        },
        "Genre": {
            "required": [
                "id_genre"
            ],
            "properties": {
                "id_genre": {
                    "description": "Class Genre",
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "nom": {
                    "description": "Class Genre",
                    "type": "string",
                    "format": "string",
                    "default": "genre"
                }
            },
            "xml": {
                "name": "Genre"
            }
        },
        "HistoriqueMembre": {
            "required": [
                "id_membre",
                "id_seance"
            ],
            "properties": {
                "id_historique": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_membre": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_seance": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "date": {
                    "type": "date",
                    "format": "date",
                    "default": "2016-04-01"
                }
            },
            "xml": {
                "name": "HistoriqueMembre"
            }
        },
        "Membre": {
            "required": [
                "id_personne",
                "id_abonnement"
            ],
            "properties": {
                "id_personne": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "id_abonnement": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "date_inscription": {
                    "type": "date",
                    "format": "date",
                    "default": "1994-01-01"
                },
                "debut_abonnement": {
                    "type": "date",
                    "format": "date",
                    "default": "1994-06-01"
                }
            },
            "xml": {
                "name": "Membre"
            }
        },
        "Personne": {
            "required": [
                "email"
            ],
            "properties": {
                "id_personne": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "nom": {
                    "type": "string",
                    "format": "string",
                    "default": "Oscar"
                },
                "prenom": {
                    "type": "string",
                    "format": "string",
                    "default": "Rab\u00e9"
                },
                "date_naissance": {
                    "type": "date",
                    "format": "date",
                    "default": "1994-01-01"
                },
                "email": {
                    "type": "string",
                    "format": "string",
                    "default": "toto@test.com"
                },
                "adresse": {
                    "type": "string",
                    "format": "string",
                    "default": "rue rivolie"
                },
                "cpostal": {
                    "type": "string",
                    "format": "string",
                    "default": "75001"
                },
                "ville": {
                    "type": "string",
                    "format": "string",
                    "default": "Paris"
                },
                "pays": {
                    "type": "string",
                    "format": "string",
                    "default": "France"
                }
            },
            "xml": {
                "name": "Personne"
            }
        },
        "Reduction": {
            "required": [
                "id_reduction"
            ],
            "properties": {
                "id_reduction": {
                    "type": "number",
                    "format": "int64",
                    "default": 1
                },
                "nom": {
                    "type": "string",
                    "format": "string",
                    "default": "r\u00e9duction"
                },
                "date_debut": {
                    "type": "date",
                    "format": "date",
                    "default": "2000-01-01"
                },
                "date_fin": {
                    "type": "date",
                    "format": "date",
                    "default": "2000-01-02"
                },
                "pourcentage_reduction": {
                    "type": "number",
                    "format": "int64",
                    "default": 0
                }
            },
            "xml": {
                "name": "Film"
            }
        }
    },
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}